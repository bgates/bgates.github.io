{"data":{"mdx":{"id":"1a454dea-42f5-598a-9f05-856a2685c922","code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Day 8 had me stymied for over an hour. I was convinced immediately that I needed to use recursion, and that each call to the recursive function would have to pass in how much of the input was left. I wanted to do something like\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"function processNode(input) {\\n  // read the number of child nodes\\n  const childCount = input[0]\\n  // read the number of metadata values\\n  const metadataCount = input[1]\\n  let metadata = 0\\n  for(let i = 0; i < childCount; i++) {\\n    metadata += processNode(WHAT IS THIS)\\n  }\\n  // add the metadata values for the current node\\n  return metadata\\n}```\\n\\n-and I got hung up on the value for that argument. I had only about eight lines of code - not groundbreaking, revolutionary stuff, either, just assigning a couple of variables from array elements and starting a loop - and I simply would not get rid of them. I was locked in on those exact lines, as if deleting everything and starting over would have ruined my mojo, and I would have forgotten how to name a variable. It was like that scene in [Tin Cup](https://www.dailymotion.com/video/x6ghtv) where (*spoiler alert*) Kevin Costner's golfer character becomes fixated on the idea of one, specific, impossible approach, and ends up hitting the ball in the water a dozen times.\\n\\nDon't Tin Cup your algorithms. If you get stuck and things aren't working out, stop what you're doing and rethink.\\n\\nI stopped what I was doing long enough to go to bed. In the morning, I realized I didn't need to give each call of the function its own input value, because every call was dealing with the same input - the algorithm had to march along the root node, one element at a time. I needed to have the root node, and the current index, in scope for every call of the function (meaning outside the body of the function):\\n\\n```javascript\\nconst fs = require('fs')\\nconst root = fs.readFileSync(`./input/day8.txt`, 'utf8')\\n  .split(' ')\\n  .map(Number)\\nlet index = 0\\nfunction processNode() {\\n  const childCount = root[index]\\n  index++\\n  const metadataCount = root[index]\\n  index++\\n  let metadata = 0\\n  for(let childIndex = 0; childIndex < childCount; childIndex++) {\\n    metadata += processNode()\\n  }\\n  for(let metadataIndex = 0; metadataIndex < metadataCount; metadataIndex++) {\\n    metadata += root[index]\\n    index++\\n  }\\n  return metadata\\n}\\nconsole.log(processNode())\\n\")), mdx(\"p\", null, \"By a happy coincidence, that approach turned out to be useful for part two as well. The big change in part two was the need to store the values of a node's children. The problem statement says that metadata values (which are numbers) would be refer to the children; the combination of storing several values and accessing each one by number led me to use an array. I had to do a little re-indexing since the problem statement says the first child would be referred to by the number 1 and the second by 2 etc, unlike JavaScript arrays which are 0-indexed. Despite that, the solution came pretty quickly, and I think it reads ok:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"index = 0\\nfunction processNode2() {\\n  const childCount = root[index]\\n  index++\\n  const metadataCount = root[index]\\n  index++\\n  let metadata = 0\\n  let childValues = []\\n  for(let childIndex = 0; childIndex < childCount; childIndex++) {\\n    childValues[childIndex] = processNode2()\\n  }\\n  if (childCount === 0) {\\n    for(let metadataIndex = 0; metadataIndex < metadataCount; metadataIndex++) {\\n      metadata += root[index]\\n      index++\\n    }\\n  } else {\\n    for(let metadataIndex = 0; metadataIndex < metadataCount; metadataIndex++) {\\n      if (childValues[root[index] - 1]) {\\n        metadata += childValues[root[index] - 1]\\n      }\\n      index++\\n    }\\n  }\\n  return metadata\\n}\\nconsole.log(processNode2())\\n\")), mdx(\"p\", null, \"Once I had a clear head, I was able to solve both parts of the challenge \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"and\"), \" complete this writeup in the same amount of time I had spent completely stubbornly stuck on part one the night before.\"), mdx(\"p\", null, \"Don't Tin Cup your algorithms.\"));\n}\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"1a454dea-42f5-598a-9f05-856a2685c922","slug":"/2018-advent-of-code-day-eight/","timeToRead":1,"wordCount":203,"frontMatter":{"date":null,"title":"","tags":null},"prev":{"id":"62e66597-dc96-5fc0-ad59-668577c3e85f","parent":{"name":"2018-advent-of-code-day-seven"},"excerpt":"This one really killed me. The problem was that I assumed every letter that didn't have a prerequisite would go to the start of the list…","fields":{"slug":"/2018-advent-of-code-day-seven/"},"timeToRead":1,"wordCount":{"words":389},"frontmatter":{"date":null,"title":"","tags":null}},"next":{"id":"b7118581-8cfd-5918-8049-7800ffaeba3c","parent":{"name":"2018-advent-of-code-day-one"},"excerpt":"2018 Advent of Code, Day One Advent of Code  is a series of software puzzles released every year during Advent ^advent . There's a cute…","fields":{"slug":"/2018-advent-of-code-day-one/"},"timeToRead":4,"wordCount":{"words":1158},"frontmatter":{"date":"2019-05-04","title":"Solving Problems with Code","tags":["education","javascript","Advent of Code"]}}}}