{"data":{"mdx":{"id":"bad906f4-932d-5a95-9701-97aba53cdcd4","code":{"body":"function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar layoutProps = {};\n\nvar MDXContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MDXContent, _React$Component);\n\n  function MDXContent(props) {\n    var _this;\n\n    _classCallCheck(this, MDXContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MDXContent).call(this, props));\n    _this.layout = null;\n    return _this;\n  }\n\n  _createClass(MDXContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          components = _this$props.components,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n      return React.createElement(MDXTag, {\n        name: \"wrapper\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"https://www.adventofcode.com\"\n        }\n      }, \"Advent of Code\"), \" is a series of software puzzles released every year during \", React.createElement(\"abbr\", {\n        title: \"December 1 - 25\"\n      }, \"Advent\"), \". There's a cute Christmas-themed story that ties the puzzles together. Every day at \", React.createElement(\"abbr\", {\n        title: \"EST\"\n      }, \"midnight\"), \", a link to the day's first puzzle goes live on the Advent of Code site. When you solve that puzzle, you get a link to a second puzzle which builds on the first. The problems are great examples of the kinds of algorithmic challenges that can come up in large scale production code but almost never happen in personal projects. That means they resemble the whiteboard job interview stuff that nobody I know likes. The critical difference is that Christmas is a much more enjoyable theme than My Career and Therefore Life Are At Stake Why Can't I Do This Damn You Whiteboard Damn You to Hell.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"I think the Advent of Code is especially well-suited for bootcamp grads who have been out for a while.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"The first problem of Day One amounts to reading a set of frequency changes and calculating where the numerical frequency ends up.\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-bash\"\n        }\n      }, \"For example, if the device displays frequency changes of +1, -2, +3, +1, then starting from a frequency of zero, the following changes would occur:\\n\\nCurrent frequency  0, change of +1; resulting frequency  1.\\nCurrent frequency  1, change of -2; resulting frequency -1.\\nCurrent frequency -1, change of +3; resulting frequency  2.\\nCurrent frequency  2, change of +1; resulting frequency  3.\\nIn this example, the resulting frequency is 3.\\n\\nHere are other example situations:\\n\\n+1, +1, +1 results in  3\\n+1, +1, -2 results in  0\\n-1, -2, -3 results in -6\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"The problem includes a link to a page that just has numbers, some positive and some negative, each on its own line, like the following Example Data\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-bash\"\n        }\n      }, \"-19\\n+3\\n+7\\n-1\\n+21\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"OK, here's how I solved it:\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"First I saved the file with the numbers as \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"day1.txt\"), \". Then I opened a new file, \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"day1.js\"), \", and wrote some Node code to read the data file:\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        }\n      }, \"const fs = require('fs')\\nconst input = fs.readFileSync(`./input/day1.txt`, 'utf8').trim()\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"The first line lets me use the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"fs\"), \" Node module, which handles file operations synchronously (so I don't have to deal with asynchronous stuff like promises or async/await). The second line reads that file and holds it in a variable called \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"input\"), \", which is a string.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"The next step is to turn the one string into a bunch of numbers:\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        }\n      }, \"const sequence = input.split('\\\\n').map(Number)\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"input\"), \" is a string with a \\\"number\\\" on each line, so \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"input.split(\\\"\\\\n\\\")\"), \" returns an array with the \\\"number\\\"s as elements. The quotes around \\\"number\\\" are there to emphasize that at this point, they're not actual numbers yet - they're still strings, like \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"input\"), \" was. I now have to change the array of \\\"number\\\"s into an array of numbers. A job for \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"map\"), \"!\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Here's something kind of clever. \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"map\"), \" takes a function as an argument, and that function is invoked with each element of the array being mapped. There are a few ways to write a function that does what I need, which is to take a string like \\\"7\\\" as an argument and return a number like \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"7\"), \". All of them use the built-in function \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"Number\"), \", which does exactly what I need:\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        }\n      }, \"Number('+7') // returns 7\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"The most common way to write \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"map\"), \"'s argument is as an arrow function, like\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        }\n      }, \"string => Number(string)\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"That's a function that takes a single argument, \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"string\"), \", and returns the value you get from invoking \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"Number\"), \" with that argument, \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"Number(string)\"), \". I could have generated the sequence of numbers from the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"input\"), \" string with\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        }\n      }, \"const sequence = input.split('\\\\n').map(string => Number(string))\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"But there's a more compact way of writing the argument to map, which is a function that takes a single argument and returns the same return value as \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"Number\"), \":\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        }\n      }, \"Number\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"That works because \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"Number\"), \" is \", React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"p\"\n      }, \"itself\"), \" \\\"a function that takes a single argument and returns the value you get from invoking \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"Number\"), \"\\\". And because \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"Number\"), \" works exactly the same as \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"string => Number(string)\"), \", I can get the sequence of numbers with\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        }\n      }, \"const sequence = input.split('\\\\n').map(Number)\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"After all that, I have an array of numbers in the variable \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"sequence\"), \", and I eed to add them all together. That's a job for \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"reduce\"), \":\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        }\n      }, \"const sum = sequence.reduce((total, current) => total + current, 0)\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"And that's the answer to Part One.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Part Two gets tougher.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"The goal of Part Two is to use the same list of changes from Part One and find the first frequency that repeats. It may be necessary to go through the list of changes more than once.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Using the list of Example Data from before\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {}\n      }, \"-19\\n+3\\n+7\\n-1\\n+21\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"starting from 0, applying the frequency changes one at a time, gets the following frequencies:\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {}\n      }, \"0 - 19 = -19\\n-19 + 3 = -16\\n-16 + 7 = -9\\n-9 - 1 = -10\\n-10 + 21 = 11\\n(repeat the list)\\n11 - 19 = -8\\n-8 + 3 = 5\\n5 + 7 = 12\\n12 - 1 = 11\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"For this list, 11 is the first frequency that occurs twice.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Naturally, the list in the Advent of Code problem is a lot bigger - over 1000 numbers, structured in a way that means the list has to be looped over many times to get a single frequency to repeat. We'll have to write code for this one.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"The solution to this problem has to do the following:\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"keep track of which frequencies have already occurred\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"detect when a frequency occurs twice\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"loop over the list an indefinite number of times, until a frequency repeats\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"If you're like me, the first thing you think of to store a bunch of data is an array. To find whether an array includes a value, you can use the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \".includes()\"), \" method. For this problem, with the amount of data involved, that works! But it's not the best. Here's a solution, with some timing code added so we can see how long it takes.\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        }\n      }, \"// sequence is defined as above\\nconsole.time('arraySolution')\\nlet currentFrequency = 0\\nlet allFrequencies = []\\nlet sequenceIndex = 0\\nwhile (!allFrequencies.includes(currentFrequency)) {\\n  allFrequencies.push(currentFrequency)\\n  currentFrequency += sequence[sequenceIndex]\\n  sequenceIndex += 1\\n  if (sequenceIndex === sequence.length) {\\n    sequenceIndex = 0\\n  }\\n}\\nconsole.log(currentFrequency)\\nconsole.timeEnd('arraySolution')\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"The calls to \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"console.time('arraySolution')\"), \" and \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"console.timeEnd('arraySolution')\"), \" provide benchmarking data, meaning at \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"timeEnd\"), \" what gets printed to the console is the time elapsed since \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"console.time\"), \". (The timer name argument is optional in this case; in more complicated code, multiple timers can be run at the same time by giving each \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"time\"), \" / \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"timeEnd\"), \" pair its own name.)\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"This solution is valid, but it's slow. On my 2014 MacBook Air, it takes about 14000ms. We can do better.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Objects can be used to store data, too. Usually, objects have categorical keys and specific values, like\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        }\n      }, \"let computer = {\\n  manufacturer: 'Apple',\\n  operatingSystem: 'macOS Sierra',\\n}\\n\\nlet phone = {\\n  manufacturer: 'Motorola',\\n  operatingSystem: 'Android 8.1.0',\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"For this problem, there aren't any categories like \\\"manufacturer\\\" to associate with the frequencies we want to store. The solution is to use the frequencies themselves as the keys! Or at least the string versions of them - all keys in JavaScript objects are strings. The value associated with every key in the object can be simply \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \"true\"), \", because the only thing of interest about a key in this object is that it exists in the object.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"The frequencies derived from the example data above (which were -19, -16, -9, etc) could be stored in an object like\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        }\n      }, \"let frequencies = { '-19': true, '-16': true, '-9': true }\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Once we have an object with frequencies used for keys, looking for a frequency means accessing the key in the object:\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        }\n      }, \"frequencies[-16] // true; -16 is a frequency in the object\\nfrequencies[42] // undefined; 42 is not a frequency in the object\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Accessing a key in an object like that is much faster than searching through an array with \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\"\n      }, \".includes\"), \". Here is the object-focused solution:\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-javascript\"\n        }\n      }, \"console.time('objectSolution')\\nlet currentFrequency = 0\\nlet allFrequencies = {}\\nlet sequenceIndex = 0\\nwhile (!allFrequencies[currentFrequency]) {\\n  allFrequencies[currentFrequency] = true\\n  currentFrequency += sequence[sequenceIndex]\\n  sequenceIndex += 1\\n  if (sequenceIndex === sequence.length) {\\n    sequenceIndex = 0\\n  }\\n}\\nconsole.log(currentFrequency)\\nconsole.timeEnd('objectSolution')\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"More than half of this code is identical to the array solution. The only changes are\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"initializing \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\"\n      }, \"allFrequencies\"), \" to an empty object instead of an empty array\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"looking for \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\"\n      }, \"currentFrequency\"), \" in the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\"\n      }, \"while\"), \" condition with \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\"\n      }, \"!allFrequencies[currentFrequency]\"), \" instead of \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\"\n      }, \"!allFrequencies.includes(currentFrequency)\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\"\n      }, \"adding to the data collection with \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\"\n      }, \"allFrequencies[currentFrequency] = true\"), \" instead of \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\"\n      }, \"allFrequencies.push(currentFrequency)\"))), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components\n      }, \"Even so, using an object instead of an array reduces the algorithm's runtime from ~14000ms to \", React.createElement(MDXTag, {\n        name: \"em\",\n        components: components,\n        parentName: \"p\"\n      }, \"~20ms\"), \".\"));\n    }\n  }]);\n\n  return MDXContent;\n}(React.Component);\n\nreturn MDXContent;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"id":"bad906f4-932d-5a95-9701-97aba53cdcd4","slug":"/advent-of-code-day-1","frontMatter":{"path":"/advent-of-code-day-1","title":"My First Post","tags":["education","javascript","Advent of Code"]},"prev":{"id":"4c59a18d-07b7-5328-ba62-36051155f98d","parent":{"name":"2018-12-02-advent-of-code-day-2"},"code":{"scope":""},"frontmatter":{"path":"/advent-of-code-day-2","title":"My Second Post","tags":["education","javascript","Advent of Code"]}},"next":null}}